concurrency:
  cancel-in-progress: true
  group: ci-${{ github.event.pull_request.number || github.sha }}
env:
  BUILD_JDK_VERSION: '21'
  DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_ACCESS_KEY }}
  GH_TOKEN: ${{ github.token }}
  LC_ALL: en_US.UTF-8
  PR_NUMBER: ${{ github.event.pull_request.number }}
  RUN_ID: ${{ github.run_id }}
jobs:
  build:
    if: github.repository == 'line/armeria'
    name: build-${{ matrix.on }}-jdk-${{ matrix.java }}${{ matrix.min-java && format('-min-java-{0}',
      matrix.min-java) || '' }}${{ matrix.leak && '-leak' || ''}}${{ matrix.coverage
      && '-coverage' || ''}}${{ matrix.snapshot && '-snapshot' || ''}}${{ matrix.blockhound
      && '-blockhound' || ''}}
    needs:
    - choose-self-hosted
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Set job name
      run: 'JOB_NAME="build-${{ matrix.on }}-jdk-${{ matrix.java }}${{ matrix.min-java
        && format(''-min-java-{0}'', matrix.min-java) || '''' }}${{ matrix.leak &&
        ''-leak'' || ''''}}${{ matrix.coverage && ''-coverage'' || ''''}}${{ matrix.snapshot
        && ''-snapshot'' || ''''}}${{ matrix.blockhound && ''-blockhound'' || ''''}}"

        echo "JOB_NAME=$JOB_NAME" >> $GITHUB_ENV

        '
      shell: bash
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      id: setup-jdk
      if: ${{ matrix.java != env.BUILD_JDK_VERSION }}
      name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}
    - continue-on-error: true
      id: setup-build-jdk
      name: Set up build JDK ${{ env.BUILD_JDK_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ env.BUILD_JDK_VERSION }}
    - continue-on-error: true
      if: always()
      name: Clean up stale build scan data
      run: 'rm -rf ~/.gradle/build-scan-data/*

        rm -rf ~/.gradle/init.d

        '
      shell: bash
    - continue-on-error: true
      name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - continue-on-error: true
      name: Build with Gradle (Shading only)
      run: './gradlew --no-daemon --stacktrace shadedJar shadedTestJar trimShadedJar
        \

        ${{ startsWith(matrix.on, ''self-hosted'') && ''--max-workers=8'' || ''--max-workers=2''
        }} --parallel \

        ${{ matrix.coverage && ''-Pcoverage'' || '''' }} \

        -PnoLint \

        -PbuildJdkVersion=${{ env.BUILD_JDK_VERSION }} \

        -PtestJavaVersion=${{ matrix.java }} \

        ${{ matrix.min-java && format(''-PminimumJavaVersion={0}'', matrix.min-java)
        || '''' }} \

        -Porg.gradle.java.installations.paths=${{ steps.setup-build-jdk.outputs.path
        }},${{ steps.setup-jdk.outputs.path }}

        '
      shell: bash
    - continue-on-error: true
      id: get-job-id
      name: Get job ID
      run: 'JOB_ID=$(gh run view $RUN_ID --json jobs | jq ".jobs[] | select(.name
        == \"${JOB_NAME}\") | .databaseId")

        echo "JOB_ID=$JOB_ID" >> $GITHUB_ENV

        '
      shell: bash
    - continue-on-error: true
      env:
        COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
      name: Build with Gradle
      run: './gradlew --no-daemon --stacktrace build \

        ${{ startsWith(matrix.on, ''self-hosted'') && ''--max-workers=8'' || ''--max-workers=2''
        }} --parallel \

        ${{ matrix.coverage && ''-Pcoverage'' || '''' }} \

        ${{ matrix.leak && ''-Pleak'' || '''' }} \

        ${{ matrix.blockhound && ''-Pblockhound'' || '''' }} \

        -PnoLint \

        -PflakyTests=false \

        -Pretry=true \

        -PbuildJdkVersion=${{ env.BUILD_JDK_VERSION }} \

        -PtestJavaVersion=${{ matrix.java }} \

        ${{ matrix.min-java && format(''-PminimumJavaVersion={0}'', matrix.min-java)
        || '''' }} \

        -Porg.gradle.java.installations.paths=${{ steps.setup-build-jdk.outputs.path
        }},${{ steps.setup-jdk.outputs.path }}

        '
      shell: bash
    - continue-on-error: true
      if: always()
      name: Upload Gradle build scan
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PR_NUMBER && format('{0}-', env.PR_NUMBER) || '' }}build-scan-${{
          env.JOB_NAME }}
        path: ~/.gradle/build-scan-data
    - continue-on-error: true
      env:
        ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.OSSRH_PASSWORD }}
        ORG_GRADLE_PROJECT_ossrhUsername: ${{ secrets.OSSRH_USER_NAME }}
        ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_PRIVATE_KEY }}
        ORG_GRADLE_PROJECT_signingKeyId: ${{ secrets.GPG_KEY_ID }}
        ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_PASSWORD }}
      if: ${{ matrix.snapshot && github.ref_name == 'main' }}
      name: Publish snapshots
      run: './gradlew --no-daemon --stacktrace --max-workers=1 publish

        '
      shell: bash
    - continue-on-error: true
      if: failure()
      name: Summarize the failed tests
      run: "./gradlew --no-daemon --stacktrace --max-workers=1 reportFailedTests \\\
        \n-PnoLint \\\n-PflakyTests=false \\\n-PbuildJdkVersion=${{ env.BUILD_JDK_VERSION\
        \ }} \\\n-PtestJavaVersion=${{ matrix.java }} \\\n${{ matrix.min-java && format('-PminimumJavaVersion={0}',\
        \ matrix.min-java) || '' }} \\\n-Porg.gradle.java.installations.paths=${{\
        \ steps.setup-build-jdk.outputs.path }},${{ steps.setup-jdk.outputs.path }}\n\
        \nSUMMARY_FILE=\"build/failed-tests-result.txt\"\nif test -f \"$SUMMARY_FILE\"\
        ; then\n  echo '### \U0001F534 Failed tests' >> $GITHUB_STEP_SUMMARY\n  cat\
        \ $SUMMARY_FILE >> $GITHUB_STEP_SUMMARY\nfi\n"
      shell: bash
    - continue-on-error: true
      if: always()
      name: Dump stuck threads
      run: jps | grep -iv "jps" | grep -v 'Daemon' | awk '{ print $1 }' | xargs -I'{}'
        jstack -l {} || true
      shell: bash
    - continue-on-error: true
      if: ${{ matrix.coverage }}
      name: Upload the coverage report to Codecov
      uses: codecov/codecov-action@v3
    - continue-on-error: true
      if: ${{ matrix.blockhound }}
      name: Fail the run if any threads were blocked
      run: "blockhound_logs=$(find . -name 'blockhound.log' -size +0); \\\nif [[ -z\
        \ ${blockhound_logs} ]]; then \\\n  exit 0; \\\nelse \\\n   while IFS= read\
        \ -r log; do \\\n     echo \"- Detected file: ${log}\"; \\\n     head --lines=1000\
        \ \"${log}\"; \\\n     echo; \\\n   done <<< \"${blockhound_logs}\"; \\\n\
        \   exit 1; \\\nfi\n"
      shell: bash
    - continue-on-error: true
      if: failure()
      name: Collect the test reports
      run: 'find . ''('' \

        -name ''java_pid*.hprof'' -or \

        -name ''hs_err_*.log'' -or \

        -path ''*/build/reports/tests'' -or \

        -path ''*/build/test-results'' -or \

        -path ''*/javadoc.options'' -or \

        -name ''blockhound.log'' '')'' \

        -exec tar rf "reports-${{ env.JOB_NAME }}.tar" {} '';''

        '
      shell: bash
    - continue-on-error: true
      if: failure()
      name: Upload the artifacts
      uses: actions/upload-artifact@v4
      with:
        name: reports-${{ env.JOB_NAME }}
        path: reports-${{ env.JOB_NAME }}.tar
        retention-days: 3
    strategy:
      fail-fast: false
      matrix:
        include:
        - java: 8
          on: ${{ needs.choose-self-hosted.outputs.runner }}
        - java: 11
          on: ${{ needs.choose-self-hosted.outputs.runner }}
        - java: 17
          leak: true
          on: ${{ needs.choose-self-hosted.outputs.runner }}
        - java: 17
          min-java: 11
          on: ${{ needs.choose-self-hosted.outputs.runner }}
        - coverage: true
          java: 17
          min-java: 17
          on: ${{ needs.choose-self-hosted.outputs.runner }}
        - blockhound: true
          java: 21
          on: ${{ needs.choose-self-hosted.outputs.runner }}
          snapshot: true
        java:
        - 21
        on:
        - ${{ needs.choose-self-hosted.outputs.runner }}
        - macos-12
        - windows-latest
    timeout-minutes: 120
  choose-self-hosted:
    outputs:
      runner: ${{ steps.runner.outputs.runner }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: runner
      run: "if [[ \"${{ github.event_name }}\" == \"pull_request\" ]]; then\n  echo\
        \ \"runner=self-hosted-unsafe\" >> \"$GITHUB_OUTPUT\"\nelse\n  echo \"runner=self-hosted-safe\"\
        \ >> \"$GITHUB_OUTPUT\"\nfi\n"
  flaky-tests:
    if: github.repository == 'line/armeria'
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      id: setup-build-jdk
      name: Set up JDK ${{ env.BUILD_JDK_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ env.BUILD_JDK_VERSION }}
    - continue-on-error: true
      name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - continue-on-error: true
      name: Run flaky tests
      run: './gradlew --no-daemon --stacktrace --max-workers=2 --parallel check \

        -PnoLint -PflakyTests=true -Pretry=true \

        -PbuildJdkVersion=${{ env.BUILD_JDK_VERSION }} \

        -PtestJavaVersion=${{ env.BUILD_JDK_VERSION }} \

        -Porg.gradle.java.installations.paths=${{ steps.setup-build-jdk.outputs.path
        }}

        '
    - continue-on-error: true
      if: failure()
      name: Summarize the failed tests
      run: "./gradlew --no-daemon --stacktrace --max-workers=1 -PnoWeb -PnoLint reportFailedTests\n\
        \nSUMMARY_FILE=\"build/failed-tests-result.txt\"\nif test -f \"$SUMMARY_FILE\"\
        ; then\n  echo '#### \U0001F534 Failed tests' >> $GITHUB_STEP_SUMMARY\n  cat\
        \ $SUMMARY_FILE >> $GITHUB_STEP_SUMMARY\nfi\n"
      shell: bash
    - continue-on-error: true
      if: always()
      name: Dump stuck threads
      run: jps | grep -iv "jps" | grep -v 'Daemon' | awk '{ print $1 }' | xargs -I'{}'
        jstack -l {} || true
      shell: bash
    timeout-minutes: 60
  lint:
    if: github.repository == 'line/armeria'
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      id: setup-build-jdk
      name: Set up JDK ${{ env.BUILD_JDK_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ env.BUILD_JDK_VERSION }}
    - continue-on-error: true
      name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - continue-on-error: true
      name: Run the linters
      run: './gradlew --no-daemon --stacktrace --max-workers=8 --parallel lint

        '
    timeout-minutes: 60
  site:
    if: github.repository == 'line/armeria'
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Install svgbob_cli
      run: 'sudo apt-get -y install cargo && cargo install svgbob_cli

        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

        '
    - continue-on-error: true
      id: setup-build-jdk
      name: Set up JDK ${{ env.BUILD_JDK_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ env.BUILD_JDK_VERSION }}
    - continue-on-error: true
      name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - continue-on-error: true
      name: Build the site
      run: './gradlew --no-daemon --stacktrace  --max-workers=2 --parallel -PgithubToken=${{
        secrets.GITHUB_TOKEN }} site

        '
      shell: bash
    timeout-minutes: 60
name: CI
on:
  repository_dispatch:
    types: trigger-ga___actions_build.yml
